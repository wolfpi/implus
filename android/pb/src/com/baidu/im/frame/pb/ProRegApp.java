// Generated by the protocol buffer compiler.  DO NOT EDIT!

package com.baidu.im.frame.pb;

public final class ProRegApp {
  private ProRegApp() {}
  @SuppressWarnings("hiding")
  public static final class RegAppReq extends
      com.google.protobuf.micro.MessageMicro {
    public RegAppReq() {}

    // required string apiKey = 1;
    public static final int APIKEY_FIELD_NUMBER = 1;
    private boolean hasApiKey;
    private java.lang.String apiKey_ = "";
    public java.lang.String getApiKey() { return apiKey_; }
    public boolean hasApiKey() { return hasApiKey; }
    public RegAppReq setApiKey(java.lang.String value) {
      hasApiKey = true;
      apiKey_ = value;
      return this;
    }
    public RegAppReq clearApiKey() {
      hasApiKey = false;
      apiKey_ = "";
      return this;
    }

    // required string channelKey = 2;
    public static final int CHANNELKEY_FIELD_NUMBER = 2;
    private boolean hasChannelKey;
    private java.lang.String channelKey_ = "";
    public java.lang.String getChannelKey() { return channelKey_; }
    public boolean hasChannelKey() { return hasChannelKey; }
    public RegAppReq setChannelKey(java.lang.String value) {
      hasChannelKey = true;
      channelKey_ = value;
      return this;
    }
    public RegAppReq clearChannelKey() {
      hasChannelKey = false;
      channelKey_ = "";
      return this;
    }

    // required .DeviceInfo deviceInfo = 3;
    public static final int DEVICEINFO_FIELD_NUMBER = 3;
    private boolean hasDeviceInfo;
    private com.baidu.im.frame.pb.ObjDeviceInfo.DeviceInfo deviceInfo_ = null;
    public boolean hasDeviceInfo() { return hasDeviceInfo; }
    public com.baidu.im.frame.pb.ObjDeviceInfo.DeviceInfo getDeviceInfo() { return deviceInfo_; }
    public RegAppReq setDeviceInfo(com.baidu.im.frame.pb.ObjDeviceInfo.DeviceInfo value) {
      if (value == null) {
        throw new NullPointerException();
      }
      hasDeviceInfo = true;
      deviceInfo_ = value;
      return this;
    }
    public RegAppReq clearDeviceInfo() {
      hasDeviceInfo = false;
      deviceInfo_ = null;
      return this;
    }

    // required string sign = 4;
    public static final int SIGN_FIELD_NUMBER = 4;
    private boolean hasSign;
    private java.lang.String sign_ = "";
    public java.lang.String getSign() { return sign_; }
    public boolean hasSign() { return hasSign; }
    public RegAppReq setSign(java.lang.String value) {
      hasSign = true;
      sign_ = value;
      return this;
    }
    public RegAppReq clearSign() {
      hasSign = false;
      sign_ = "";
      return this;
    }

    // required .DeviceTypeInfo deviceTypeInfo = 5;
    public static final int DEVICETYPEINFO_FIELD_NUMBER = 5;
    private boolean hasDeviceTypeInfo;
    private com.baidu.im.frame.pb.ObjDeviceTypeInfo.DeviceTypeInfo deviceTypeInfo_ = null;
    public boolean hasDeviceTypeInfo() { return hasDeviceTypeInfo; }
    public com.baidu.im.frame.pb.ObjDeviceTypeInfo.DeviceTypeInfo getDeviceTypeInfo() { return deviceTypeInfo_; }
    public RegAppReq setDeviceTypeInfo(com.baidu.im.frame.pb.ObjDeviceTypeInfo.DeviceTypeInfo value) {
      if (value == null) {
        throw new NullPointerException();
      }
      hasDeviceTypeInfo = true;
      deviceTypeInfo_ = value;
      return this;
    }
    public RegAppReq clearDeviceTypeInfo() {
      hasDeviceTypeInfo = false;
      deviceTypeInfo_ = null;
      return this;
    }

    public final RegAppReq clear() {
      clearApiKey();
      clearChannelKey();
      clearDeviceInfo();
      clearSign();
      clearDeviceTypeInfo();
      cachedSize = -1;
      return this;
    }

    public final boolean isInitialized() {
      if (!hasApiKey) return false;
      if (!hasChannelKey) return false;
      if (!hasDeviceInfo) return false;
      if (!hasSign) return false;
      if (!hasDeviceTypeInfo) return false;
      if (!getDeviceInfo().isInitialized()) return false;
      if (!getDeviceTypeInfo().isInitialized()) return false;
      return true;
    }

    @Override
    public void writeTo(com.google.protobuf.micro.CodedOutputStreamMicro output)
                        throws java.io.IOException {
      if (hasApiKey()) {
        output.writeString(1, getApiKey());
      }
      if (hasChannelKey()) {
        output.writeString(2, getChannelKey());
      }
      if (hasDeviceInfo()) {
        output.writeMessage(3, getDeviceInfo());
      }
      if (hasSign()) {
        output.writeString(4, getSign());
      }
      if (hasDeviceTypeInfo()) {
        output.writeMessage(5, getDeviceTypeInfo());
      }
    }

    private int cachedSize = -1;
    @Override
    public int getCachedSize() {
      if (cachedSize < 0) {
        // getSerializedSize sets cachedSize
        getSerializedSize();
      }
      return cachedSize;
    }

    @Override
    public int getSerializedSize() {
      int size = 0;
      if (hasApiKey()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeStringSize(1, getApiKey());
      }
      if (hasChannelKey()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeStringSize(2, getChannelKey());
      }
      if (hasDeviceInfo()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeMessageSize(3, getDeviceInfo());
      }
      if (hasSign()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeStringSize(4, getSign());
      }
      if (hasDeviceTypeInfo()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeMessageSize(5, getDeviceTypeInfo());
      }
      cachedSize = size;
      return size;
    }

    @Override
    public RegAppReq mergeFrom(
        com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!parseUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 10: {
            setApiKey(input.readString());
            break;
          }
          case 18: {
            setChannelKey(input.readString());
            break;
          }
          case 26: {
            com.baidu.im.frame.pb.ObjDeviceInfo.DeviceInfo value = new com.baidu.im.frame.pb.ObjDeviceInfo.DeviceInfo();
            input.readMessage(value);
            setDeviceInfo(value);
            break;
          }
          case 34: {
            setSign(input.readString());
            break;
          }
          case 42: {
            com.baidu.im.frame.pb.ObjDeviceTypeInfo.DeviceTypeInfo value = new com.baidu.im.frame.pb.ObjDeviceTypeInfo.DeviceTypeInfo();
            input.readMessage(value);
            setDeviceTypeInfo(value);
            break;
          }
        }
      }
    }

    public static RegAppReq parseFrom(byte[] data)
        throws com.google.protobuf.micro.InvalidProtocolBufferMicroException {
      return (RegAppReq) (new RegAppReq().mergeFrom(data));
    }

    public static RegAppReq parseFrom(
            com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      return new RegAppReq().mergeFrom(input);
    }

  }

  @SuppressWarnings("hiding")
  public static final class RegAppRsp extends
      com.google.protobuf.micro.MessageMicro {
    public RegAppRsp() {}

    // optional uint32 deviceTypeId = 1;
    public static final int DEVICETYPEID_FIELD_NUMBER = 1;
    private boolean hasDeviceTypeId;
    private int deviceTypeId_ = 0;
    public int getDeviceTypeId() { return deviceTypeId_; }
    public boolean hasDeviceTypeId() { return hasDeviceTypeId; }
    public RegAppRsp setDeviceTypeId(int value) {
      hasDeviceTypeId = true;
      deviceTypeId_ = value;
      return this;
    }
    public RegAppRsp clearDeviceTypeId() {
      hasDeviceTypeId = false;
      deviceTypeId_ = 0;
      return this;
    }

    // required string deviceId = 2;
    public static final int DEVICEID_FIELD_NUMBER = 2;
    private boolean hasDeviceId;
    private java.lang.String deviceId_ = "";
    public java.lang.String getDeviceId() { return deviceId_; }
    public boolean hasDeviceId() { return hasDeviceId; }
    public RegAppRsp setDeviceId(java.lang.String value) {
      hasDeviceId = true;
      deviceId_ = value;
      return this;
    }
    public RegAppRsp clearDeviceId() {
      hasDeviceId = false;
      deviceId_ = "";
      return this;
    }

    public final RegAppRsp clear() {
      clearDeviceTypeId();
      clearDeviceId();
      cachedSize = -1;
      return this;
    }

    public final boolean isInitialized() {
      if (!hasDeviceId) return false;
      return true;
    }

    @Override
    public void writeTo(com.google.protobuf.micro.CodedOutputStreamMicro output)
                        throws java.io.IOException {
      if (hasDeviceTypeId()) {
        output.writeUInt32(1, getDeviceTypeId());
      }
      if (hasDeviceId()) {
        output.writeString(2, getDeviceId());
      }
    }

    private int cachedSize = -1;
    @Override
    public int getCachedSize() {
      if (cachedSize < 0) {
        // getSerializedSize sets cachedSize
        getSerializedSize();
      }
      return cachedSize;
    }

    @Override
    public int getSerializedSize() {
      int size = 0;
      if (hasDeviceTypeId()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeUInt32Size(1, getDeviceTypeId());
      }
      if (hasDeviceId()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeStringSize(2, getDeviceId());
      }
      cachedSize = size;
      return size;
    }

    @Override
    public RegAppRsp mergeFrom(
        com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!parseUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 8: {
            setDeviceTypeId(input.readUInt32());
            break;
          }
          case 18: {
            setDeviceId(input.readString());
            break;
          }
        }
      }
    }

    public static RegAppRsp parseFrom(byte[] data)
        throws com.google.protobuf.micro.InvalidProtocolBufferMicroException {
      return (RegAppRsp) (new RegAppRsp().mergeFrom(data));
    }

    public static RegAppRsp parseFrom(
            com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      return new RegAppRsp().mergeFrom(input);
    }

  }

}
