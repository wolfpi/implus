// Generated by the protocol buffer compiler.  DO NOT EDIT!

package com.baidu.im.frame.pb;

public final class ProInitSplitUpload {
  private ProInitSplitUpload() {}
  @SuppressWarnings("hiding")
  public static final class InitSplitUploadReq extends
      com.google.protobuf.micro.MessageMicro {
    public InitSplitUploadReq() {}

    // required string fileName = 1;
    public static final int FILENAME_FIELD_NUMBER = 1;
    private boolean hasFileName;
    private java.lang.String fileName_ = "";
    public java.lang.String getFileName() { return fileName_; }
    public boolean hasFileName() { return hasFileName; }
    public InitSplitUploadReq setFileName(java.lang.String value) {
      hasFileName = true;
      fileName_ = value;
      return this;
    }
    public InitSplitUploadReq clearFileName() {
      hasFileName = false;
      fileName_ = "";
      return this;
    }

    // required uint32 fileSize = 2;
    public static final int FILESIZE_FIELD_NUMBER = 2;
    private boolean hasFileSize;
    private int fileSize_ = 0;
    public int getFileSize() { return fileSize_; }
    public boolean hasFileSize() { return hasFileSize; }
    public InitSplitUploadReq setFileSize(int value) {
      hasFileSize = true;
      fileSize_ = value;
      return this;
    }
    public InitSplitUploadReq clearFileSize() {
      hasFileSize = false;
      fileSize_ = 0;
      return this;
    }

    // required string md5 = 3;
    public static final int MD5_FIELD_NUMBER = 3;
    private boolean hasMd5;
    private java.lang.String md5_ = "";
    public java.lang.String getMd5() { return md5_; }
    public boolean hasMd5() { return hasMd5; }
    public InitSplitUploadReq setMd5(java.lang.String value) {
      hasMd5 = true;
      md5_ = value;
      return this;
    }
    public InitSplitUploadReq clearMd5() {
      hasMd5 = false;
      md5_ = "";
      return this;
    }

    // required .EFileType fileType = 4;
    public static final int FILETYPE_FIELD_NUMBER = 4;
    private boolean hasFileType;
    private int fileType_ = com.baidu.im.frame.pb.EnumFileType.FILE_IMAGE;
    public boolean hasFileType() { return hasFileType; }
    public int getFileType() { return fileType_; }
    public InitSplitUploadReq setFileType(int value) {
      hasFileType = true;
      fileType_ = value;
      return this;
    }
    public InitSplitUploadReq clearFileType() {
      hasFileType = false;
      fileType_ = com.baidu.im.frame.pb.EnumFileType.FILE_IMAGE;
      return this;
    }

    public final InitSplitUploadReq clear() {
      clearFileName();
      clearFileSize();
      clearMd5();
      clearFileType();
      cachedSize = -1;
      return this;
    }

    public final boolean isInitialized() {
      if (!hasFileName) return false;
      if (!hasFileSize) return false;
      if (!hasMd5) return false;
      if (!hasFileType) return false;
      return true;
    }

    @Override
    public void writeTo(com.google.protobuf.micro.CodedOutputStreamMicro output)
                        throws java.io.IOException {
      if (hasFileName()) {
        output.writeString(1, getFileName());
      }
      if (hasFileSize()) {
        output.writeUInt32(2, getFileSize());
      }
      if (hasMd5()) {
        output.writeString(3, getMd5());
      }
      if (hasFileType()) {
        output.writeInt32(4, getFileType());
      }
    }

    private int cachedSize = -1;
    @Override
    public int getCachedSize() {
      if (cachedSize < 0) {
        // getSerializedSize sets cachedSize
        getSerializedSize();
      }
      return cachedSize;
    }

    @Override
    public int getSerializedSize() {
      int size = 0;
      if (hasFileName()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeStringSize(1, getFileName());
      }
      if (hasFileSize()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeUInt32Size(2, getFileSize());
      }
      if (hasMd5()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeStringSize(3, getMd5());
      }
      if (hasFileType()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeInt32Size(4, getFileType());
      }
      cachedSize = size;
      return size;
    }

    @Override
    public InitSplitUploadReq mergeFrom(
        com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!parseUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 10: {
            setFileName(input.readString());
            break;
          }
          case 16: {
            setFileSize(input.readUInt32());
            break;
          }
          case 26: {
            setMd5(input.readString());
            break;
          }
          case 32: {
              setFileType(input.readInt32());
            break;
          }
        }
      }
    }

    public static InitSplitUploadReq parseFrom(byte[] data)
        throws com.google.protobuf.micro.InvalidProtocolBufferMicroException {
      return (InitSplitUploadReq) (new InitSplitUploadReq().mergeFrom(data));
    }

    public static InitSplitUploadReq parseFrom(
            com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      return new InitSplitUploadReq().mergeFrom(input);
    }

  }

  @SuppressWarnings("hiding")
  public static final class InitSplitUploadRsp extends
      com.google.protobuf.micro.MessageMicro {
    public InitSplitUploadRsp() {}

    // required string fileId = 1;
    public static final int FILEID_FIELD_NUMBER = 1;
    private boolean hasFileId;
    private java.lang.String fileId_ = "";
    public java.lang.String getFileId() { return fileId_; }
    public boolean hasFileId() { return hasFileId; }
    public InitSplitUploadRsp setFileId(java.lang.String value) {
      hasFileId = true;
      fileId_ = value;
      return this;
    }
    public InitSplitUploadRsp clearFileId() {
      hasFileId = false;
      fileId_ = "";
      return this;
    }

    // required string uploadUrl = 2;
    public static final int UPLOADURL_FIELD_NUMBER = 2;
    private boolean hasUploadUrl;
    private java.lang.String uploadUrl_ = "";
    public java.lang.String getUploadUrl() { return uploadUrl_; }
    public boolean hasUploadUrl() { return hasUploadUrl; }
    public InitSplitUploadRsp setUploadUrl(java.lang.String value) {
      hasUploadUrl = true;
      uploadUrl_ = value;
      return this;
    }
    public InitSplitUploadRsp clearUploadUrl() {
      hasUploadUrl = false;
      uploadUrl_ = "";
      return this;
    }

    // required string uploadId = 3;
    public static final int UPLOADID_FIELD_NUMBER = 3;
    private boolean hasUploadId;
    private java.lang.String uploadId_ = "";
    public java.lang.String getUploadId() { return uploadId_; }
    public boolean hasUploadId() { return hasUploadId; }
    public InitSplitUploadRsp setUploadId(java.lang.String value) {
      hasUploadId = true;
      uploadId_ = value;
      return this;
    }
    public InitSplitUploadRsp clearUploadId() {
      hasUploadId = false;
      uploadId_ = "";
      return this;
    }

    // required bool exist = 4;
    public static final int EXIST_FIELD_NUMBER = 4;
    private boolean hasExist;
    private boolean exist_ = false;
    public boolean getExist() { return exist_; }
    public boolean hasExist() { return hasExist; }
    public InitSplitUploadRsp setExist(boolean value) {
      hasExist = true;
      exist_ = value;
      return this;
    }
    public InitSplitUploadRsp clearExist() {
      hasExist = false;
      exist_ = false;
      return this;
    }

    public final InitSplitUploadRsp clear() {
      clearFileId();
      clearUploadUrl();
      clearUploadId();
      clearExist();
      cachedSize = -1;
      return this;
    }

    public final boolean isInitialized() {
      if (!hasFileId) return false;
      if (!hasUploadUrl) return false;
      if (!hasUploadId) return false;
      if (!hasExist) return false;
      return true;
    }

    @Override
    public void writeTo(com.google.protobuf.micro.CodedOutputStreamMicro output)
                        throws java.io.IOException {
      if (hasFileId()) {
        output.writeString(1, getFileId());
      }
      if (hasUploadUrl()) {
        output.writeString(2, getUploadUrl());
      }
      if (hasUploadId()) {
        output.writeString(3, getUploadId());
      }
      if (hasExist()) {
        output.writeBool(4, getExist());
      }
    }

    private int cachedSize = -1;
    @Override
    public int getCachedSize() {
      if (cachedSize < 0) {
        // getSerializedSize sets cachedSize
        getSerializedSize();
      }
      return cachedSize;
    }

    @Override
    public int getSerializedSize() {
      int size = 0;
      if (hasFileId()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeStringSize(1, getFileId());
      }
      if (hasUploadUrl()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeStringSize(2, getUploadUrl());
      }
      if (hasUploadId()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeStringSize(3, getUploadId());
      }
      if (hasExist()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeBoolSize(4, getExist());
      }
      cachedSize = size;
      return size;
    }

    @Override
    public InitSplitUploadRsp mergeFrom(
        com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!parseUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 10: {
            setFileId(input.readString());
            break;
          }
          case 18: {
            setUploadUrl(input.readString());
            break;
          }
          case 26: {
            setUploadId(input.readString());
            break;
          }
          case 32: {
            setExist(input.readBool());
            break;
          }
        }
      }
    }

    public static InitSplitUploadRsp parseFrom(byte[] data)
        throws com.google.protobuf.micro.InvalidProtocolBufferMicroException {
      return (InitSplitUploadRsp) (new InitSplitUploadRsp().mergeFrom(data));
    }

    public static InitSplitUploadRsp parseFrom(
            com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      return new InitSplitUploadRsp().mergeFrom(input);
    }

  }

}
