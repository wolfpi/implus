// Generated by the protocol buffer compiler.  DO NOT EDIT!

package com.baidu.im.frame.pb;

public final class ProSetAppStatus {
  private ProSetAppStatus() {}
  @SuppressWarnings("hiding")
  public static final class SetAppStatusReq extends
      com.google.protobuf.micro.MessageMicro {
    public SetAppStatusReq() {}

    // repeated uint32 appIds = 1;
    public static final int APPIDS_FIELD_NUMBER = 1;
    private java.util.List<java.lang.Integer> appIds_ =
      java.util.Collections.emptyList();
    public java.util.List<java.lang.Integer> getAppIdsList() {
      return appIds_;
    }
    public int getAppIdsCount() { return appIds_.size(); }
    public int getAppIds(int index) {
      return appIds_.get(index);
    }
    public SetAppStatusReq setAppIds(int index, int value) {
      appIds_.set(index, value);
      return this;
    }
    public SetAppStatusReq addAppIds(int value) {
      if (appIds_.isEmpty()) {
        appIds_ = new java.util.ArrayList<java.lang.Integer>();
      }
      appIds_.add(value);
      return this;
    }
    public SetAppStatusReq clearAppIds() {
      appIds_ = java.util.Collections.emptyList();
      return this;
    }

    // required .EAppStatus status = 2;
    public static final int STATUS_FIELD_NUMBER = 2;
    private boolean hasStatus;
    private int status_ = com.baidu.im.frame.pb.EnumAppStatus.APP_NULL;
    public boolean hasStatus() { return hasStatus; }
    public int getStatus() { return status_; }
    public SetAppStatusReq setStatus(int value) {
      hasStatus = true;
      status_ = value;
      return this;
    }
    public SetAppStatusReq clearStatus() {
      hasStatus = false;
      status_ = com.baidu.im.frame.pb.EnumAppStatus.APP_NULL;
      return this;
    }

    // required string channelKey = 3;
    public static final int CHANNELKEY_FIELD_NUMBER = 3;
    private boolean hasChannelKey;
    private java.lang.String channelKey_ = "";
    public java.lang.String getChannelKey() { return channelKey_; }
    public boolean hasChannelKey() { return hasChannelKey; }
    public SetAppStatusReq setChannelKey(java.lang.String value) {
      hasChannelKey = true;
      channelKey_ = value;
      return this;
    }
    public SetAppStatusReq clearChannelKey() {
      hasChannelKey = false;
      channelKey_ = "";
      return this;
    }

    public final SetAppStatusReq clear() {
      clearAppIds();
      clearStatus();
      clearChannelKey();
      cachedSize = -1;
      return this;
    }

    public final boolean isInitialized() {
      if (!hasStatus) return false;
      if (!hasChannelKey) return false;
      return true;
    }

    @Override
    public void writeTo(com.google.protobuf.micro.CodedOutputStreamMicro output)
                        throws java.io.IOException {
      for (int element : getAppIdsList()) {
        output.writeUInt32(1, element);
      }
      if (hasStatus()) {
        output.writeInt32(2, getStatus());
      }
      if (hasChannelKey()) {
        output.writeString(3, getChannelKey());
      }
    }

    private int cachedSize = -1;
    @Override
    public int getCachedSize() {
      if (cachedSize < 0) {
        // getSerializedSize sets cachedSize
        getSerializedSize();
      }
      return cachedSize;
    }

    @Override
    public int getSerializedSize() {
      int size = 0;
      {
        int dataSize = 0;
        for (int element : getAppIdsList()) {
          dataSize += com.google.protobuf.micro.CodedOutputStreamMicro
            .computeUInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * getAppIdsList().size();
      }
      if (hasStatus()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeInt32Size(2, getStatus());
      }
      if (hasChannelKey()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeStringSize(3, getChannelKey());
      }
      cachedSize = size;
      return size;
    }

    @Override
    public SetAppStatusReq mergeFrom(
        com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!parseUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 8: {
            addAppIds(input.readUInt32());
            break;
          }
          case 16: {
              setStatus(input.readInt32());
            break;
          }
          case 26: {
            setChannelKey(input.readString());
            break;
          }
        }
      }
    }

    public static SetAppStatusReq parseFrom(byte[] data)
        throws com.google.protobuf.micro.InvalidProtocolBufferMicroException {
      return (SetAppStatusReq) (new SetAppStatusReq().mergeFrom(data));
    }

    public static SetAppStatusReq parseFrom(
            com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      return new SetAppStatusReq().mergeFrom(input);
    }

  }

  @SuppressWarnings("hiding")
  public static final class SetAppStatusRsp extends
      com.google.protobuf.micro.MessageMicro {
    public SetAppStatusRsp() {}

    // repeated uint32 needRegAppIds = 1;
    public static final int NEEDREGAPPIDS_FIELD_NUMBER = 1;
    private java.util.List<java.lang.Integer> needRegAppIds_ =
      java.util.Collections.emptyList();
    public java.util.List<java.lang.Integer> getNeedRegAppIdsList() {
      return needRegAppIds_;
    }
    public int getNeedRegAppIdsCount() { return needRegAppIds_.size(); }
    public int getNeedRegAppIds(int index) {
      return needRegAppIds_.get(index);
    }
    public SetAppStatusRsp setNeedRegAppIds(int index, int value) {
      needRegAppIds_.set(index, value);
      return this;
    }
    public SetAppStatusRsp addNeedRegAppIds(int value) {
      if (needRegAppIds_.isEmpty()) {
        needRegAppIds_ = new java.util.ArrayList<java.lang.Integer>();
      }
      needRegAppIds_.add(value);
      return this;
    }
    public SetAppStatusRsp clearNeedRegAppIds() {
      needRegAppIds_ = java.util.Collections.emptyList();
      return this;
    }

    public final SetAppStatusRsp clear() {
      clearNeedRegAppIds();
      cachedSize = -1;
      return this;
    }

    public final boolean isInitialized() {
      return true;
    }

    @Override
    public void writeTo(com.google.protobuf.micro.CodedOutputStreamMicro output)
                        throws java.io.IOException {
      for (int element : getNeedRegAppIdsList()) {
        output.writeUInt32(1, element);
      }
    }

    private int cachedSize = -1;
    @Override
    public int getCachedSize() {
      if (cachedSize < 0) {
        // getSerializedSize sets cachedSize
        getSerializedSize();
      }
      return cachedSize;
    }

    @Override
    public int getSerializedSize() {
      int size = 0;
      {
        int dataSize = 0;
        for (int element : getNeedRegAppIdsList()) {
          dataSize += com.google.protobuf.micro.CodedOutputStreamMicro
            .computeUInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * getNeedRegAppIdsList().size();
      }
      cachedSize = size;
      return size;
    }

    @Override
    public SetAppStatusRsp mergeFrom(
        com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!parseUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 8: {
            addNeedRegAppIds(input.readUInt32());
            break;
          }
        }
      }
    }

    public static SetAppStatusRsp parseFrom(byte[] data)
        throws com.google.protobuf.micro.InvalidProtocolBufferMicroException {
      return (SetAppStatusRsp) (new SetAppStatusRsp().mergeFrom(data));
    }

    public static SetAppStatusRsp parseFrom(
            com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      return new SetAppStatusRsp().mergeFrom(input);
    }

  }

}
