// Generated by the protocol buffer compiler.  DO NOT EDIT!

package com.baidu.im.frame.pb;

public final class ProAccProtocol {
  private ProAccProtocol() {}
  // enum ESymcrytType
  public static final int SYM_METHOD_NONE = 0;
  public static final int SYM_METHOD_AES = 1;
  public static final int SYM_METHOD_DES = 2;

  // enum ECompressType
  public static final int COMPRESS_METHOD_NONE = 0;
  public static final int COMPRESS_METHOD_ZIP = 1;

  @SuppressWarnings("hiding")
  public static final class PubKeyInfo extends
      com.google.protobuf.micro.MessageMicro {
    public PubKeyInfo() {}

    // required int32 nUindex = 1;
    public static final int NUINDEX_FIELD_NUMBER = 1;
    private boolean hasNUindex;
    private int nUindex_ = 0;
    public int getNUindex() { return nUindex_; }
    public boolean hasNUindex() { return hasNUindex; }
    public PubKeyInfo setNUindex(int value) {
      hasNUindex = true;
      nUindex_ = value;
      return this;
    }
    public PubKeyInfo clearNUindex() {
      hasNUindex = false;
      nUindex_ = 0;
      return this;
    }

    // required bytes clientPubKey = 2;
    public static final int CLIENTPUBKEY_FIELD_NUMBER = 2;
    private boolean hasClientPubKey;
    private com.google.protobuf.micro.ByteStringMicro clientPubKey_ = com.google.protobuf.micro.ByteStringMicro.EMPTY;
    public com.google.protobuf.micro.ByteStringMicro getClientPubKey() { return clientPubKey_; }
    public boolean hasClientPubKey() { return hasClientPubKey; }
    public PubKeyInfo setClientPubKey(com.google.protobuf.micro.ByteStringMicro value) {
      hasClientPubKey = true;
      clientPubKey_ = value;
      return this;
    }
    public PubKeyInfo clearClientPubKey() {
      hasClientPubKey = false;
      clientPubKey_ = com.google.protobuf.micro.ByteStringMicro.EMPTY;
      return this;
    }

    public final PubKeyInfo clear() {
      clearNUindex();
      clearClientPubKey();
      cachedSize = -1;
      return this;
    }

    public final boolean isInitialized() {
      if (!hasNUindex) return false;
      if (!hasClientPubKey) return false;
      return true;
    }

    @Override
    public void writeTo(com.google.protobuf.micro.CodedOutputStreamMicro output)
                        throws java.io.IOException {
      if (hasNUindex()) {
        output.writeInt32(1, getNUindex());
      }
      if (hasClientPubKey()) {
        output.writeBytes(2, getClientPubKey());
      }
    }

    private int cachedSize = -1;
    @Override
    public int getCachedSize() {
      if (cachedSize < 0) {
        // getSerializedSize sets cachedSize
        getSerializedSize();
      }
      return cachedSize;
    }

    @Override
    public int getSerializedSize() {
      int size = 0;
      if (hasNUindex()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeInt32Size(1, getNUindex());
      }
      if (hasClientPubKey()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeBytesSize(2, getClientPubKey());
      }
      cachedSize = size;
      return size;
    }

    @Override
    public PubKeyInfo mergeFrom(
        com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!parseUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 8: {
            setNUindex(input.readInt32());
            break;
          }
          case 18: {
            setClientPubKey(input.readBytes());
            break;
          }
        }
      }
    }

    public static PubKeyInfo parseFrom(byte[] data)
        throws com.google.protobuf.micro.InvalidProtocolBufferMicroException {
      return (PubKeyInfo) (new PubKeyInfo().mergeFrom(data));
    }

    public static PubKeyInfo parseFrom(
            com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      return new PubKeyInfo().mergeFrom(input);
    }

  }

  @SuppressWarnings("hiding")
  public static final class ChannelInfo extends
      com.google.protobuf.micro.MessageMicro {
    public ChannelInfo() {}

    // optional .PubKeyInfo pubKey = 1;
    public static final int PUBKEY_FIELD_NUMBER = 1;
    private boolean hasPubKey;
    private com.baidu.im.frame.pb.ProAccProtocol.PubKeyInfo pubKey_ = null;
    public boolean hasPubKey() { return hasPubKey; }
    public com.baidu.im.frame.pb.ProAccProtocol.PubKeyInfo getPubKey() { return pubKey_; }
    public ChannelInfo setPubKey(com.baidu.im.frame.pb.ProAccProtocol.PubKeyInfo value) {
      if (value == null) {
        throw new NullPointerException();
      }
      hasPubKey = true;
      pubKey_ = value;
      return this;
    }
    public ChannelInfo clearPubKey() {
      hasPubKey = false;
      pubKey_ = null;
      return this;
    }

    // repeated int32 busiSupportEncryptType = 2;
    public static final int BUSISUPPORTENCRYPTTYPE_FIELD_NUMBER = 2;
    private java.util.List<java.lang.Integer> busiSupportEncryptType_ =
      java.util.Collections.emptyList();
    public java.util.List<java.lang.Integer> getBusiSupportEncryptTypeList() {
      return busiSupportEncryptType_;
    }
    public int getBusiSupportEncryptTypeCount() { return busiSupportEncryptType_.size(); }
    public int getBusiSupportEncryptType(int index) {
      return busiSupportEncryptType_.get(index);
    }
    public ChannelInfo setBusiSupportEncryptType(int index, int value) {
      busiSupportEncryptType_.set(index, value);
      return this;
    }
    public ChannelInfo addBusiSupportEncryptType(int value) {
      if (busiSupportEncryptType_.isEmpty()) {
        busiSupportEncryptType_ = new java.util.ArrayList<java.lang.Integer>();
      }
      busiSupportEncryptType_.add(value);
      return this;
    }
    public ChannelInfo clearBusiSupportEncryptType() {
      busiSupportEncryptType_ = java.util.Collections.emptyList();
      return this;
    }

    // repeated int32 busiSupportCompressType = 3;
    public static final int BUSISUPPORTCOMPRESSTYPE_FIELD_NUMBER = 3;
    private java.util.List<java.lang.Integer> busiSupportCompressType_ =
      java.util.Collections.emptyList();
    public java.util.List<java.lang.Integer> getBusiSupportCompressTypeList() {
      return busiSupportCompressType_;
    }
    public int getBusiSupportCompressTypeCount() { return busiSupportCompressType_.size(); }
    public int getBusiSupportCompressType(int index) {
      return busiSupportCompressType_.get(index);
    }
    public ChannelInfo setBusiSupportCompressType(int index, int value) {
      busiSupportCompressType_.set(index, value);
      return this;
    }
    public ChannelInfo addBusiSupportCompressType(int value) {
      if (busiSupportCompressType_.isEmpty()) {
        busiSupportCompressType_ = new java.util.ArrayList<java.lang.Integer>();
      }
      busiSupportCompressType_.add(value);
      return this;
    }
    public ChannelInfo clearBusiSupportCompressType() {
      busiSupportCompressType_ = java.util.Collections.emptyList();
      return this;
    }

    public final ChannelInfo clear() {
      clearPubKey();
      clearBusiSupportEncryptType();
      clearBusiSupportCompressType();
      cachedSize = -1;
      return this;
    }

    public final boolean isInitialized() {
      if (hasPubKey()) {
        if (!getPubKey().isInitialized()) return false;
      }
      return true;
    }

    @Override
    public void writeTo(com.google.protobuf.micro.CodedOutputStreamMicro output)
                        throws java.io.IOException {
      if (hasPubKey()) {
        output.writeMessage(1, getPubKey());
      }
      for (int element : getBusiSupportEncryptTypeList()) {
        output.writeInt32(2, element);
      }
      for (int element : getBusiSupportCompressTypeList()) {
        output.writeInt32(3, element);
      }
    }

    private int cachedSize = -1;
    @Override
    public int getCachedSize() {
      if (cachedSize < 0) {
        // getSerializedSize sets cachedSize
        getSerializedSize();
      }
      return cachedSize;
    }

    @Override
    public int getSerializedSize() {
      int size = 0;
      if (hasPubKey()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeMessageSize(1, getPubKey());
      }
      {
        int dataSize = 0;
        for (int element : getBusiSupportEncryptTypeList()) {
          dataSize += com.google.protobuf.micro.CodedOutputStreamMicro
            .computeInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * getBusiSupportEncryptTypeList().size();
      }
      {
        int dataSize = 0;
        for (int element : getBusiSupportCompressTypeList()) {
          dataSize += com.google.protobuf.micro.CodedOutputStreamMicro
            .computeInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * getBusiSupportCompressTypeList().size();
      }
      cachedSize = size;
      return size;
    }

    @Override
    public ChannelInfo mergeFrom(
        com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!parseUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 10: {
            com.baidu.im.frame.pb.ProAccProtocol.PubKeyInfo value = new com.baidu.im.frame.pb.ProAccProtocol.PubKeyInfo();
            input.readMessage(value);
            setPubKey(value);
            break;
          }
          case 16: {
            addBusiSupportEncryptType(input.readInt32());
            break;
          }
          case 24: {
            addBusiSupportCompressType(input.readInt32());
            break;
          }
        }
      }
    }

    public static ChannelInfo parseFrom(byte[] data)
        throws com.google.protobuf.micro.InvalidProtocolBufferMicroException {
      return (ChannelInfo) (new ChannelInfo().mergeFrom(data));
    }

    public static ChannelInfo parseFrom(
            com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      return new ChannelInfo().mergeFrom(input);
    }

  }

  @SuppressWarnings("hiding")
  public static final class S1Data extends
      com.google.protobuf.micro.MessageMicro {
    public S1Data() {}

    // required int32 ver = 1;
    public static final int VER_FIELD_NUMBER = 1;
    private boolean hasVer;
    private int ver_ = 0;
    public int getVer() { return ver_; }
    public boolean hasVer() { return hasVer; }
    public S1Data setVer(int value) {
      hasVer = true;
      ver_ = value;
      return this;
    }
    public S1Data clearVer() {
      hasVer = false;
      ver_ = 0;
      return this;
    }

    // required int32 encIndex = 2;
    public static final int ENCINDEX_FIELD_NUMBER = 2;
    private boolean hasEncIndex;
    private int encIndex_ = 0;
    public int getEncIndex() { return encIndex_; }
    public boolean hasEncIndex() { return hasEncIndex; }
    public S1Data setEncIndex(int value) {
      hasEncIndex = true;
      encIndex_ = value;
      return this;
    }
    public S1Data clearEncIndex() {
      hasEncIndex = false;
      encIndex_ = 0;
      return this;
    }

    // required int32 nSindex = 3;
    public static final int NSINDEX_FIELD_NUMBER = 3;
    private boolean hasNSindex;
    private int nSindex_ = 0;
    public int getNSindex() { return nSindex_; }
    public boolean hasNSindex() { return hasNSindex; }
    public S1Data setNSindex(int value) {
      hasNSindex = true;
      nSindex_ = value;
      return this;
    }
    public S1Data clearNSindex() {
      hasNSindex = false;
      nSindex_ = 0;
      return this;
    }

    // optional bytes clientInfo = 4;
    public static final int CLIENTINFO_FIELD_NUMBER = 4;
    private boolean hasClientInfo;
    private com.google.protobuf.micro.ByteStringMicro clientInfo_ = com.google.protobuf.micro.ByteStringMicro.EMPTY;
    public com.google.protobuf.micro.ByteStringMicro getClientInfo() { return clientInfo_; }
    public boolean hasClientInfo() { return hasClientInfo; }
    public S1Data setClientInfo(com.google.protobuf.micro.ByteStringMicro value) {
      hasClientInfo = true;
      clientInfo_ = value;
      return this;
    }
    public S1Data clearClientInfo() {
      hasClientInfo = false;
      clientInfo_ = com.google.protobuf.micro.ByteStringMicro.EMPTY;
      return this;
    }

    public final S1Data clear() {
      clearVer();
      clearEncIndex();
      clearNSindex();
      clearClientInfo();
      cachedSize = -1;
      return this;
    }

    public final boolean isInitialized() {
      if (!hasVer) return false;
      if (!hasEncIndex) return false;
      if (!hasNSindex) return false;
      return true;
    }

    @Override
    public void writeTo(com.google.protobuf.micro.CodedOutputStreamMicro output)
                        throws java.io.IOException {
      if (hasVer()) {
        output.writeInt32(1, getVer());
      }
      if (hasEncIndex()) {
        output.writeInt32(2, getEncIndex());
      }
      if (hasNSindex()) {
        output.writeInt32(3, getNSindex());
      }
      if (hasClientInfo()) {
        output.writeBytes(4, getClientInfo());
      }
    }

    private int cachedSize = -1;
    @Override
    public int getCachedSize() {
      if (cachedSize < 0) {
        // getSerializedSize sets cachedSize
        getSerializedSize();
      }
      return cachedSize;
    }

    @Override
    public int getSerializedSize() {
      int size = 0;
      if (hasVer()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeInt32Size(1, getVer());
      }
      if (hasEncIndex()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeInt32Size(2, getEncIndex());
      }
      if (hasNSindex()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeInt32Size(3, getNSindex());
      }
      if (hasClientInfo()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeBytesSize(4, getClientInfo());
      }
      cachedSize = size;
      return size;
    }

    @Override
    public S1Data mergeFrom(
        com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!parseUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 8: {
            setVer(input.readInt32());
            break;
          }
          case 16: {
            setEncIndex(input.readInt32());
            break;
          }
          case 24: {
            setNSindex(input.readInt32());
            break;
          }
          case 34: {
            setClientInfo(input.readBytes());
            break;
          }
        }
      }
    }

    public static S1Data parseFrom(byte[] data)
        throws com.google.protobuf.micro.InvalidProtocolBufferMicroException {
      return (S1Data) (new S1Data().mergeFrom(data));
    }

    public static S1Data parseFrom(
            com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      return new S1Data().mergeFrom(input);
    }

  }

  @SuppressWarnings("hiding")
  public static final class S2Data extends
      com.google.protobuf.micro.MessageMicro {
    public S2Data() {}

    // required int32 symcryptType = 1;
    public static final int SYMCRYPTTYPE_FIELD_NUMBER = 1;
    private boolean hasSymcryptType;
    private int symcryptType_ = 0;
    public int getSymcryptType() { return symcryptType_; }
    public boolean hasSymcryptType() { return hasSymcryptType; }
    public S2Data setSymcryptType(int value) {
      hasSymcryptType = true;
      symcryptType_ = value;
      return this;
    }
    public S2Data clearSymcryptType() {
      hasSymcryptType = false;
      symcryptType_ = 0;
      return this;
    }

    // required int32 compressType = 2;
    public static final int COMPRESSTYPE_FIELD_NUMBER = 2;
    private boolean hasCompressType;
    private int compressType_ = 0;
    public int getCompressType() { return compressType_; }
    public boolean hasCompressType() { return hasCompressType; }
    public S2Data setCompressType(int value) {
      hasCompressType = true;
      compressType_ = value;
      return this;
    }
    public S2Data clearCompressType() {
      hasCompressType = false;
      compressType_ = 0;
      return this;
    }

    // optional bytes svrPubKey = 3;
    public static final int SVRPUBKEY_FIELD_NUMBER = 3;
    private boolean hasSvrPubKey;
    private com.google.protobuf.micro.ByteStringMicro svrPubKey_ = com.google.protobuf.micro.ByteStringMicro.EMPTY;
    public com.google.protobuf.micro.ByteStringMicro getSvrPubKey() { return svrPubKey_; }
    public boolean hasSvrPubKey() { return hasSvrPubKey; }
    public S2Data setSvrPubKey(com.google.protobuf.micro.ByteStringMicro value) {
      hasSvrPubKey = true;
      svrPubKey_ = value;
      return this;
    }
    public S2Data clearSvrPubKey() {
      hasSvrPubKey = false;
      svrPubKey_ = com.google.protobuf.micro.ByteStringMicro.EMPTY;
      return this;
    }

    // optional int32 shareKeyLen = 4;
    public static final int SHAREKEYLEN_FIELD_NUMBER = 4;
    private boolean hasShareKeyLen;
    private int shareKeyLen_ = 0;
    public int getShareKeyLen() { return shareKeyLen_; }
    public boolean hasShareKeyLen() { return hasShareKeyLen; }
    public S2Data setShareKeyLen(int value) {
      hasShareKeyLen = true;
      shareKeyLen_ = value;
      return this;
    }
    public S2Data clearShareKeyLen() {
      hasShareKeyLen = false;
      shareKeyLen_ = 0;
      return this;
    }

    public final S2Data clear() {
      clearSymcryptType();
      clearCompressType();
      clearSvrPubKey();
      clearShareKeyLen();
      cachedSize = -1;
      return this;
    }

    public final boolean isInitialized() {
      if (!hasSymcryptType) return false;
      if (!hasCompressType) return false;
      return true;
    }

    @Override
    public void writeTo(com.google.protobuf.micro.CodedOutputStreamMicro output)
                        throws java.io.IOException {
      if (hasSymcryptType()) {
        output.writeInt32(1, getSymcryptType());
      }
      if (hasCompressType()) {
        output.writeInt32(2, getCompressType());
      }
      if (hasSvrPubKey()) {
        output.writeBytes(3, getSvrPubKey());
      }
      if (hasShareKeyLen()) {
        output.writeInt32(4, getShareKeyLen());
      }
    }

    private int cachedSize = -1;
    @Override
    public int getCachedSize() {
      if (cachedSize < 0) {
        // getSerializedSize sets cachedSize
        getSerializedSize();
      }
      return cachedSize;
    }

    @Override
    public int getSerializedSize() {
      int size = 0;
      if (hasSymcryptType()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeInt32Size(1, getSymcryptType());
      }
      if (hasCompressType()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeInt32Size(2, getCompressType());
      }
      if (hasSvrPubKey()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeBytesSize(3, getSvrPubKey());
      }
      if (hasShareKeyLen()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeInt32Size(4, getShareKeyLen());
      }
      cachedSize = size;
      return size;
    }

    @Override
    public S2Data mergeFrom(
        com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!parseUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 8: {
            setSymcryptType(input.readInt32());
            break;
          }
          case 16: {
            setCompressType(input.readInt32());
            break;
          }
          case 26: {
            setSvrPubKey(input.readBytes());
            break;
          }
          case 32: {
            setShareKeyLen(input.readInt32());
            break;
          }
        }
      }
    }

    public static S2Data parseFrom(byte[] data)
        throws com.google.protobuf.micro.InvalidProtocolBufferMicroException {
      return (S2Data) (new S2Data().mergeFrom(data));
    }

    public static S2Data parseFrom(
            com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      return new S2Data().mergeFrom(input);
    }

  }

}
