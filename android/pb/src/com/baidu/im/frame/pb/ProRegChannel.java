// Generated by the protocol buffer compiler.  DO NOT EDIT!

package com.baidu.im.frame.pb;

public final class ProRegChannel {
  private ProRegChannel() {}
  // enum ERelocateType
  public static final int RELOCATE_NULL = 0;
  public static final int RELOCATE_DEBUG = 1;
  public static final int RELOCATE_BEST = 2;

  @SuppressWarnings("hiding")
  public static final class RelocateServerIPInfo extends
      com.google.protobuf.micro.MessageMicro {
    public RelocateServerIPInfo() {}

    // required .ERelocateType relocateType = 1;
    public static final int RELOCATETYPE_FIELD_NUMBER = 1;
    private boolean hasRelocateType;
    private int relocateType_ = com.baidu.im.frame.pb.ProRegChannel.RELOCATE_NULL;
    public boolean hasRelocateType() { return hasRelocateType; }
    public int getRelocateType() { return relocateType_; }
    public RelocateServerIPInfo setRelocateType(int value) {
      hasRelocateType = true;
      relocateType_ = value;
      return this;
    }
    public RelocateServerIPInfo clearRelocateType() {
      hasRelocateType = false;
      relocateType_ = com.baidu.im.frame.pb.ProRegChannel.RELOCATE_NULL;
      return this;
    }

    // required uint32 serverIp = 2;
    public static final int SERVERIP_FIELD_NUMBER = 2;
    private boolean hasServerIp;
    private int serverIp_ = 0;
    public int getServerIp() { return serverIp_; }
    public boolean hasServerIp() { return hasServerIp; }
    public RelocateServerIPInfo setServerIp(int value) {
      hasServerIp = true;
      serverIp_ = value;
      return this;
    }
    public RelocateServerIPInfo clearServerIp() {
      hasServerIp = false;
      serverIp_ = 0;
      return this;
    }

    // required uint32 serverPort = 3;
    public static final int SERVERPORT_FIELD_NUMBER = 3;
    private boolean hasServerPort;
    private int serverPort_ = 0;
    public int getServerPort() { return serverPort_; }
    public boolean hasServerPort() { return hasServerPort; }
    public RelocateServerIPInfo setServerPort(int value) {
      hasServerPort = true;
      serverPort_ = value;
      return this;
    }
    public RelocateServerIPInfo clearServerPort() {
      hasServerPort = false;
      serverPort_ = 0;
      return this;
    }

    public final RelocateServerIPInfo clear() {
      clearRelocateType();
      clearServerIp();
      clearServerPort();
      cachedSize = -1;
      return this;
    }

    public final boolean isInitialized() {
      if (!hasRelocateType) return false;
      if (!hasServerIp) return false;
      if (!hasServerPort) return false;
      return true;
    }

    @Override
    public void writeTo(com.google.protobuf.micro.CodedOutputStreamMicro output)
                        throws java.io.IOException {
      if (hasRelocateType()) {
        output.writeInt32(1, getRelocateType());
      }
      if (hasServerIp()) {
        output.writeUInt32(2, getServerIp());
      }
      if (hasServerPort()) {
        output.writeUInt32(3, getServerPort());
      }
    }

    private int cachedSize = -1;
    @Override
    public int getCachedSize() {
      if (cachedSize < 0) {
        // getSerializedSize sets cachedSize
        getSerializedSize();
      }
      return cachedSize;
    }

    @Override
    public int getSerializedSize() {
      int size = 0;
      if (hasRelocateType()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeInt32Size(1, getRelocateType());
      }
      if (hasServerIp()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeUInt32Size(2, getServerIp());
      }
      if (hasServerPort()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeUInt32Size(3, getServerPort());
      }
      cachedSize = size;
      return size;
    }

    @Override
    public RelocateServerIPInfo mergeFrom(
        com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!parseUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 8: {
              setRelocateType(input.readInt32());
            break;
          }
          case 16: {
            setServerIp(input.readUInt32());
            break;
          }
          case 24: {
            setServerPort(input.readUInt32());
            break;
          }
        }
      }
    }

    public static RelocateServerIPInfo parseFrom(byte[] data)
        throws com.google.protobuf.micro.InvalidProtocolBufferMicroException {
      return (RelocateServerIPInfo) (new RelocateServerIPInfo().mergeFrom(data));
    }

    public static RelocateServerIPInfo parseFrom(
            com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      return new RelocateServerIPInfo().mergeFrom(input);
    }

  }

  @SuppressWarnings("hiding")
  public static final class RegChannelReq extends
      com.google.protobuf.micro.MessageMicro {
    public RegChannelReq() {}

    // optional string channelKey = 1;
    public static final int CHANNELKEY_FIELD_NUMBER = 1;
    private boolean hasChannelKey;
    private java.lang.String channelKey_ = "";
    public java.lang.String getChannelKey() { return channelKey_; }
    public boolean hasChannelKey() { return hasChannelKey; }
    public RegChannelReq setChannelKey(java.lang.String value) {
      hasChannelKey = true;
      channelKey_ = value;
      return this;
    }
    public RegChannelReq clearChannelKey() {
      hasChannelKey = false;
      channelKey_ = "";
      return this;
    }

    // optional string extraInfo = 2;
    public static final int EXTRAINFO_FIELD_NUMBER = 2;
    private boolean hasExtraInfo;
    private java.lang.String extraInfo_ = "";
    public java.lang.String getExtraInfo() { return extraInfo_; }
    public boolean hasExtraInfo() { return hasExtraInfo; }
    public RegChannelReq setExtraInfo(java.lang.String value) {
      hasExtraInfo = true;
      extraInfo_ = value;
      return this;
    }
    public RegChannelReq clearExtraInfo() {
      hasExtraInfo = false;
      extraInfo_ = "";
      return this;
    }

    // optional string deviceToken = 3;
    public static final int DEVICETOKEN_FIELD_NUMBER = 3;
    private boolean hasDeviceToken;
    private java.lang.String deviceToken_ = "";
    public java.lang.String getDeviceToken() { return deviceToken_; }
    public boolean hasDeviceToken() { return hasDeviceToken; }
    public RegChannelReq setDeviceToken(java.lang.String value) {
      hasDeviceToken = true;
      deviceToken_ = value;
      return this;
    }
    public RegChannelReq clearDeviceToken() {
      hasDeviceToken = false;
      deviceToken_ = "";
      return this;
    }

    public final RegChannelReq clear() {
      clearChannelKey();
      clearExtraInfo();
      clearDeviceToken();
      cachedSize = -1;
      return this;
    }

    public final boolean isInitialized() {
      return true;
    }

    @Override
    public void writeTo(com.google.protobuf.micro.CodedOutputStreamMicro output)
                        throws java.io.IOException {
      if (hasChannelKey()) {
        output.writeString(1, getChannelKey());
      }
      if (hasExtraInfo()) {
        output.writeString(2, getExtraInfo());
      }
      if (hasDeviceToken()) {
        output.writeString(3, getDeviceToken());
      }
    }

    private int cachedSize = -1;
    @Override
    public int getCachedSize() {
      if (cachedSize < 0) {
        // getSerializedSize sets cachedSize
        getSerializedSize();
      }
      return cachedSize;
    }

    @Override
    public int getSerializedSize() {
      int size = 0;
      if (hasChannelKey()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeStringSize(1, getChannelKey());
      }
      if (hasExtraInfo()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeStringSize(2, getExtraInfo());
      }
      if (hasDeviceToken()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeStringSize(3, getDeviceToken());
      }
      cachedSize = size;
      return size;
    }

    @Override
    public RegChannelReq mergeFrom(
        com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!parseUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 10: {
            setChannelKey(input.readString());
            break;
          }
          case 18: {
            setExtraInfo(input.readString());
            break;
          }
          case 26: {
            setDeviceToken(input.readString());
            break;
          }
        }
      }
    }

    public static RegChannelReq parseFrom(byte[] data)
        throws com.google.protobuf.micro.InvalidProtocolBufferMicroException {
      return (RegChannelReq) (new RegChannelReq().mergeFrom(data));
    }

    public static RegChannelReq parseFrom(
            com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      return new RegChannelReq().mergeFrom(input);
    }

  }

  @SuppressWarnings("hiding")
  public static final class RegChannelRsp extends
      com.google.protobuf.micro.MessageMicro {
    public RegChannelRsp() {}

    // required string channelKey = 1;
    public static final int CHANNELKEY_FIELD_NUMBER = 1;
    private boolean hasChannelKey;
    private java.lang.String channelKey_ = "";
    public java.lang.String getChannelKey() { return channelKey_; }
    public boolean hasChannelKey() { return hasChannelKey; }
    public RegChannelRsp setChannelKey(java.lang.String value) {
      hasChannelKey = true;
      channelKey_ = value;
      return this;
    }
    public RegChannelRsp clearChannelKey() {
      hasChannelKey = false;
      channelKey_ = "";
      return this;
    }

    // optional .RelocateServerIPInfo relocateIP = 2;
    public static final int RELOCATEIP_FIELD_NUMBER = 2;
    private boolean hasRelocateIP;
    private com.baidu.im.frame.pb.ProRegChannel.RelocateServerIPInfo relocateIP_ = null;
    public boolean hasRelocateIP() { return hasRelocateIP; }
    public com.baidu.im.frame.pb.ProRegChannel.RelocateServerIPInfo getRelocateIP() { return relocateIP_; }
    public RegChannelRsp setRelocateIP(com.baidu.im.frame.pb.ProRegChannel.RelocateServerIPInfo value) {
      if (value == null) {
        throw new NullPointerException();
      }
      hasRelocateIP = true;
      relocateIP_ = value;
      return this;
    }
    public RegChannelRsp clearRelocateIP() {
      hasRelocateIP = false;
      relocateIP_ = null;
      return this;
    }

    public final RegChannelRsp clear() {
      clearChannelKey();
      clearRelocateIP();
      cachedSize = -1;
      return this;
    }

    public final boolean isInitialized() {
      if (!hasChannelKey) return false;
      if (hasRelocateIP()) {
        if (!getRelocateIP().isInitialized()) return false;
      }
      return true;
    }

    @Override
    public void writeTo(com.google.protobuf.micro.CodedOutputStreamMicro output)
                        throws java.io.IOException {
      if (hasChannelKey()) {
        output.writeString(1, getChannelKey());
      }
      if (hasRelocateIP()) {
        output.writeMessage(2, getRelocateIP());
      }
    }

    private int cachedSize = -1;
    @Override
    public int getCachedSize() {
      if (cachedSize < 0) {
        // getSerializedSize sets cachedSize
        getSerializedSize();
      }
      return cachedSize;
    }

    @Override
    public int getSerializedSize() {
      int size = 0;
      if (hasChannelKey()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeStringSize(1, getChannelKey());
      }
      if (hasRelocateIP()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeMessageSize(2, getRelocateIP());
      }
      cachedSize = size;
      return size;
    }

    @Override
    public RegChannelRsp mergeFrom(
        com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!parseUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 10: {
            setChannelKey(input.readString());
            break;
          }
          case 18: {
            com.baidu.im.frame.pb.ProRegChannel.RelocateServerIPInfo value = new com.baidu.im.frame.pb.ProRegChannel.RelocateServerIPInfo();
            input.readMessage(value);
            setRelocateIP(value);
            break;
          }
        }
      }
    }

    public static RegChannelRsp parseFrom(byte[] data)
        throws com.google.protobuf.micro.InvalidProtocolBufferMicroException {
      return (RegChannelRsp) (new RegChannelRsp().mergeFrom(data));
    }

    public static RegChannelRsp parseFrom(
            com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      return new RegChannelRsp().mergeFrom(input);
    }

  }

}
