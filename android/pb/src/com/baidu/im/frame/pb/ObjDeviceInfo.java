// Generated by the protocol buffer compiler.  DO NOT EDIT!

package com.baidu.im.frame.pb;

public final class ObjDeviceInfo {
  private ObjDeviceInfo() {}
  @SuppressWarnings("hiding")
  public static final class DeviceInfo extends
      com.google.protobuf.micro.MessageMicro {
    public DeviceInfo() {}

    // required string deviceToken = 1;
    public static final int DEVICETOKEN_FIELD_NUMBER = 1;
    private boolean hasDeviceToken;
    private java.lang.String deviceToken_ = "";
    public java.lang.String getDeviceToken() { return deviceToken_; }
    public boolean hasDeviceToken() { return hasDeviceToken; }
    public DeviceInfo setDeviceToken(java.lang.String value) {
      hasDeviceToken = true;
      deviceToken_ = value;
      return this;
    }
    public DeviceInfo clearDeviceToken() {
      hasDeviceToken = false;
      deviceToken_ = "";
      return this;
    }

    // required uint32 deviceTypeId = 2;
    public static final int DEVICETYPEID_FIELD_NUMBER = 2;
    private boolean hasDeviceTypeId;
    private int deviceTypeId_ = 0;
    public int getDeviceTypeId() { return deviceTypeId_; }
    public boolean hasDeviceTypeId() { return hasDeviceTypeId; }
    public DeviceInfo setDeviceTypeId(int value) {
      hasDeviceTypeId = true;
      deviceTypeId_ = value;
      return this;
    }
    public DeviceInfo clearDeviceTypeId() {
      hasDeviceTypeId = false;
      deviceTypeId_ = 0;
      return this;
    }

    // optional string deviceName = 3;
    public static final int DEVICENAME_FIELD_NUMBER = 3;
    private boolean hasDeviceName;
    private java.lang.String deviceName_ = "";
    public java.lang.String getDeviceName() { return deviceName_; }
    public boolean hasDeviceName() { return hasDeviceName; }
    public DeviceInfo setDeviceName(java.lang.String value) {
      hasDeviceName = true;
      deviceName_ = value;
      return this;
    }
    public DeviceInfo clearDeviceName() {
      hasDeviceName = false;
      deviceName_ = "";
      return this;
    }

    // optional string imei = 4;
    public static final int IMEI_FIELD_NUMBER = 4;
    private boolean hasImei;
    private java.lang.String imei_ = "";
    public java.lang.String getImei() { return imei_; }
    public boolean hasImei() { return hasImei; }
    public DeviceInfo setImei(java.lang.String value) {
      hasImei = true;
      imei_ = value;
      return this;
    }
    public DeviceInfo clearImei() {
      hasImei = false;
      imei_ = "";
      return this;
    }

    // optional string sdCard = 5;
    public static final int SDCARD_FIELD_NUMBER = 5;
    private boolean hasSdCard;
    private java.lang.String sdCard_ = "";
    public java.lang.String getSdCard() { return sdCard_; }
    public boolean hasSdCard() { return hasSdCard; }
    public DeviceInfo setSdCard(java.lang.String value) {
      hasSdCard = true;
      sdCard_ = value;
      return this;
    }
    public DeviceInfo clearSdCard() {
      hasSdCard = false;
      sdCard_ = "";
      return this;
    }

    // required .EPlatformType platform = 6;
    public static final int PLATFORM_FIELD_NUMBER = 6;
    private boolean hasPlatform;
    private int platform_ = com.baidu.im.frame.pb.EnumPlatformType.WINDOWS;
    public boolean hasPlatform() { return hasPlatform; }
    public int getPlatform() { return platform_; }
    public DeviceInfo setPlatform(int value) {
      hasPlatform = true;
      platform_ = value;
      return this;
    }
    public DeviceInfo clearPlatform() {
      hasPlatform = false;
      platform_ = com.baidu.im.frame.pb.EnumPlatformType.WINDOWS;
      return this;
    }

    // optional uint32 regTime = 7;
    public static final int REGTIME_FIELD_NUMBER = 7;
    private boolean hasRegTime;
    private int regTime_ = 0;
    public int getRegTime() { return regTime_; }
    public boolean hasRegTime() { return hasRegTime; }
    public DeviceInfo setRegTime(int value) {
      hasRegTime = true;
      regTime_ = value;
      return this;
    }
    public DeviceInfo clearRegTime() {
      hasRegTime = false;
      regTime_ = 0;
      return this;
    }

    public final DeviceInfo clear() {
      clearDeviceToken();
      clearDeviceTypeId();
      clearDeviceName();
      clearImei();
      clearSdCard();
      clearPlatform();
      clearRegTime();
      cachedSize = -1;
      return this;
    }

    public final boolean isInitialized() {
      if (!hasDeviceToken) return false;
      if (!hasDeviceTypeId) return false;
      if (!hasPlatform) return false;
      return true;
    }

    @Override
    public void writeTo(com.google.protobuf.micro.CodedOutputStreamMicro output)
                        throws java.io.IOException {
      if (hasDeviceToken()) {
        output.writeString(1, getDeviceToken());
      }
      if (hasDeviceTypeId()) {
        output.writeUInt32(2, getDeviceTypeId());
      }
      if (hasDeviceName()) {
        output.writeString(3, getDeviceName());
      }
      if (hasImei()) {
        output.writeString(4, getImei());
      }
      if (hasSdCard()) {
        output.writeString(5, getSdCard());
      }
      if (hasPlatform()) {
        output.writeInt32(6, getPlatform());
      }
      if (hasRegTime()) {
        output.writeUInt32(7, getRegTime());
      }
    }

    private int cachedSize = -1;
    @Override
    public int getCachedSize() {
      if (cachedSize < 0) {
        // getSerializedSize sets cachedSize
        getSerializedSize();
      }
      return cachedSize;
    }

    @Override
    public int getSerializedSize() {
      int size = 0;
      if (hasDeviceToken()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeStringSize(1, getDeviceToken());
      }
      if (hasDeviceTypeId()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeUInt32Size(2, getDeviceTypeId());
      }
      if (hasDeviceName()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeStringSize(3, getDeviceName());
      }
      if (hasImei()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeStringSize(4, getImei());
      }
      if (hasSdCard()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeStringSize(5, getSdCard());
      }
      if (hasPlatform()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeInt32Size(6, getPlatform());
      }
      if (hasRegTime()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeUInt32Size(7, getRegTime());
      }
      cachedSize = size;
      return size;
    }

    @Override
    public DeviceInfo mergeFrom(
        com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!parseUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 10: {
            setDeviceToken(input.readString());
            break;
          }
          case 16: {
            setDeviceTypeId(input.readUInt32());
            break;
          }
          case 26: {
            setDeviceName(input.readString());
            break;
          }
          case 34: {
            setImei(input.readString());
            break;
          }
          case 42: {
            setSdCard(input.readString());
            break;
          }
          case 48: {
              setPlatform(input.readInt32());
            break;
          }
          case 56: {
            setRegTime(input.readUInt32());
            break;
          }
        }
      }
    }

    public static DeviceInfo parseFrom(byte[] data)
        throws com.google.protobuf.micro.InvalidProtocolBufferMicroException {
      return (DeviceInfo) (new DeviceInfo().mergeFrom(data));
    }

    public static DeviceInfo parseFrom(
            com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      return new DeviceInfo().mergeFrom(input);
    }

  }

}
