// Generated by the protocol buffer compiler.  DO NOT EDIT!

package com.baidu.im.frame.pb;

public final class ObjDeviceTypeInfo {
  private ObjDeviceTypeInfo() {}
  @SuppressWarnings("hiding")
  public static final class DeviceTypeInfo extends
      com.google.protobuf.micro.MessageMicro {
    public DeviceTypeInfo() {}

    // required .EPlatformType platform = 1;
    public static final int PLATFORM_FIELD_NUMBER = 1;
    private boolean hasPlatform;
    private int platform_ = com.baidu.im.frame.pb.EnumPlatformType.WINDOWS;
    public boolean hasPlatform() { return hasPlatform; }
    public int getPlatform() { return platform_; }
    public DeviceTypeInfo setPlatform(int value) {
      hasPlatform = true;
      platform_ = value;
      return this;
    }
    public DeviceTypeInfo clearPlatform() {
      hasPlatform = false;
      platform_ = com.baidu.im.frame.pb.EnumPlatformType.WINDOWS;
      return this;
    }

    // optional string model = 2;
    public static final int MODEL_FIELD_NUMBER = 2;
    private boolean hasModel;
    private java.lang.String model_ = "";
    public java.lang.String getModel() { return model_; }
    public boolean hasModel() { return hasModel; }
    public DeviceTypeInfo setModel(java.lang.String value) {
      hasModel = true;
      model_ = value;
      return this;
    }
    public DeviceTypeInfo clearModel() {
      hasModel = false;
      model_ = "";
      return this;
    }

    // optional string os = 3;
    public static final int OS_FIELD_NUMBER = 3;
    private boolean hasOs;
    private java.lang.String os_ = "";
    public java.lang.String getOs() { return os_; }
    public boolean hasOs() { return hasOs; }
    public DeviceTypeInfo setOs(java.lang.String value) {
      hasOs = true;
      os_ = value;
      return this;
    }
    public DeviceTypeInfo clearOs() {
      hasOs = false;
      os_ = "";
      return this;
    }

    // optional string network = 4;
    public static final int NETWORK_FIELD_NUMBER = 4;
    private boolean hasNetwork;
    private java.lang.String network_ = "";
    public java.lang.String getNetwork() { return network_; }
    public boolean hasNetwork() { return hasNetwork; }
    public DeviceTypeInfo setNetwork(java.lang.String value) {
      hasNetwork = true;
      network_ = value;
      return this;
    }
    public DeviceTypeInfo clearNetwork() {
      hasNetwork = false;
      network_ = "";
      return this;
    }

    // optional string sdDouble = 5;
    public static final int SDDOUBLE_FIELD_NUMBER = 5;
    private boolean hasSdDouble;
    private java.lang.String sdDouble_ = "";
    public java.lang.String getSdDouble() { return sdDouble_; }
    public boolean hasSdDouble() { return hasSdDouble; }
    public DeviceTypeInfo setSdDouble(java.lang.String value) {
      hasSdDouble = true;
      sdDouble_ = value;
      return this;
    }
    public DeviceTypeInfo clearSdDouble() {
      hasSdDouble = false;
      sdDouble_ = "";
      return this;
    }

    // optional string display = 6;
    public static final int DISPLAY_FIELD_NUMBER = 6;
    private boolean hasDisplay;
    private java.lang.String display_ = "";
    public java.lang.String getDisplay() { return display_; }
    public boolean hasDisplay() { return hasDisplay; }
    public DeviceTypeInfo setDisplay(java.lang.String value) {
      hasDisplay = true;
      display_ = value;
      return this;
    }
    public DeviceTypeInfo clearDisplay() {
      hasDisplay = false;
      display_ = "";
      return this;
    }

    // optional string manu = 7;
    public static final int MANU_FIELD_NUMBER = 7;
    private boolean hasManu;
    private java.lang.String manu_ = "";
    public java.lang.String getManu() { return manu_; }
    public boolean hasManu() { return hasManu; }
    public DeviceTypeInfo setManu(java.lang.String value) {
      hasManu = true;
      manu_ = value;
      return this;
    }
    public DeviceTypeInfo clearManu() {
      hasManu = false;
      manu_ = "";
      return this;
    }

    // optional string screenSize = 8;
    public static final int SCREENSIZE_FIELD_NUMBER = 8;
    private boolean hasScreenSize;
    private java.lang.String screenSize_ = "";
    public java.lang.String getScreenSize() { return screenSize_; }
    public boolean hasScreenSize() { return hasScreenSize; }
    public DeviceTypeInfo setScreenSize(java.lang.String value) {
      hasScreenSize = true;
      screenSize_ = value;
      return this;
    }
    public DeviceTypeInfo clearScreenSize() {
      hasScreenSize = false;
      screenSize_ = "";
      return this;
    }

    public final DeviceTypeInfo clear() {
      clearPlatform();
      clearModel();
      clearOs();
      clearNetwork();
      clearSdDouble();
      clearDisplay();
      clearManu();
      clearScreenSize();
      cachedSize = -1;
      return this;
    }

    public final boolean isInitialized() {
      if (!hasPlatform) return false;
      return true;
    }

    @Override
    public void writeTo(com.google.protobuf.micro.CodedOutputStreamMicro output)
                        throws java.io.IOException {
      if (hasPlatform()) {
        output.writeInt32(1, getPlatform());
      }
      if (hasModel()) {
        output.writeString(2, getModel());
      }
      if (hasOs()) {
        output.writeString(3, getOs());
      }
      if (hasNetwork()) {
        output.writeString(4, getNetwork());
      }
      if (hasSdDouble()) {
        output.writeString(5, getSdDouble());
      }
      if (hasDisplay()) {
        output.writeString(6, getDisplay());
      }
      if (hasManu()) {
        output.writeString(7, getManu());
      }
      if (hasScreenSize()) {
        output.writeString(8, getScreenSize());
      }
    }

    private int cachedSize = -1;
    @Override
    public int getCachedSize() {
      if (cachedSize < 0) {
        // getSerializedSize sets cachedSize
        getSerializedSize();
      }
      return cachedSize;
    }

    @Override
    public int getSerializedSize() {
      int size = 0;
      if (hasPlatform()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeInt32Size(1, getPlatform());
      }
      if (hasModel()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeStringSize(2, getModel());
      }
      if (hasOs()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeStringSize(3, getOs());
      }
      if (hasNetwork()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeStringSize(4, getNetwork());
      }
      if (hasSdDouble()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeStringSize(5, getSdDouble());
      }
      if (hasDisplay()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeStringSize(6, getDisplay());
      }
      if (hasManu()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeStringSize(7, getManu());
      }
      if (hasScreenSize()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeStringSize(8, getScreenSize());
      }
      cachedSize = size;
      return size;
    }

    @Override
    public DeviceTypeInfo mergeFrom(
        com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!parseUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 8: {
              setPlatform(input.readInt32());
            break;
          }
          case 18: {
            setModel(input.readString());
            break;
          }
          case 26: {
            setOs(input.readString());
            break;
          }
          case 34: {
            setNetwork(input.readString());
            break;
          }
          case 42: {
            setSdDouble(input.readString());
            break;
          }
          case 50: {
            setDisplay(input.readString());
            break;
          }
          case 58: {
            setManu(input.readString());
            break;
          }
          case 66: {
            setScreenSize(input.readString());
            break;
          }
        }
      }
    }

    public static DeviceTypeInfo parseFrom(byte[] data)
        throws com.google.protobuf.micro.InvalidProtocolBufferMicroException {
      return (DeviceTypeInfo) (new DeviceTypeInfo().mergeFrom(data));
    }

    public static DeviceTypeInfo parseFrom(
            com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      return new DeviceTypeInfo().mergeFrom(input);
    }

  }

}
