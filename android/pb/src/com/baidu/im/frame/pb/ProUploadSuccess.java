// Generated by the protocol buffer compiler.  DO NOT EDIT!

package com.baidu.im.frame.pb;

public final class ProUploadSuccess {
  private ProUploadSuccess() {}
  @SuppressWarnings("hiding")
  public static final class UploadSuccessReq extends
      com.google.protobuf.micro.MessageMicro {
    public UploadSuccessReq() {}

    // repeated string fid = 1;
    public static final int FID_FIELD_NUMBER = 1;
    private java.util.List<java.lang.String> fid_ =
      java.util.Collections.emptyList();
    public java.util.List<java.lang.String> getFidList() {
      return fid_;
    }
    public int getFidCount() { return fid_.size(); }
    public java.lang.String getFid(int index) {
      return fid_.get(index);
    }
    public UploadSuccessReq setFid(int index, java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  fid_.set(index, value);
      return this;
    }
    public UploadSuccessReq addFid(java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  if (fid_.isEmpty()) {
        fid_ = new java.util.ArrayList<java.lang.String>();
      }
      fid_.add(value);
      return this;
    }
    public UploadSuccessReq clearFid() {
      fid_ = java.util.Collections.emptyList();
      return this;
    }

    public final UploadSuccessReq clear() {
      clearFid();
      cachedSize = -1;
      return this;
    }

    public final boolean isInitialized() {
      return true;
    }

    @Override
    public void writeTo(com.google.protobuf.micro.CodedOutputStreamMicro output)
                        throws java.io.IOException {
      for (java.lang.String element : getFidList()) {
        output.writeString(1, element);
      }
    }

    private int cachedSize = -1;
    @Override
    public int getCachedSize() {
      if (cachedSize < 0) {
        // getSerializedSize sets cachedSize
        getSerializedSize();
      }
      return cachedSize;
    }

    @Override
    public int getSerializedSize() {
      int size = 0;
      {
        int dataSize = 0;
        for (java.lang.String element : getFidList()) {
          dataSize += com.google.protobuf.micro.CodedOutputStreamMicro
            .computeStringSizeNoTag(element);
        }
        size += dataSize;
        size += 1 * getFidList().size();
      }
      cachedSize = size;
      return size;
    }

    @Override
    public UploadSuccessReq mergeFrom(
        com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!parseUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 10: {
            addFid(input.readString());
            break;
          }
        }
      }
    }

    public static UploadSuccessReq parseFrom(byte[] data)
        throws com.google.protobuf.micro.InvalidProtocolBufferMicroException {
      return (UploadSuccessReq) (new UploadSuccessReq().mergeFrom(data));
    }

    public static UploadSuccessReq parseFrom(
            com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      return new UploadSuccessReq().mergeFrom(input);
    }

  }

  @SuppressWarnings("hiding")
  public static final class UploadSuccessRsp extends
      com.google.protobuf.micro.MessageMicro {
    public UploadSuccessRsp() {}

    public final UploadSuccessRsp clear() {
      cachedSize = -1;
      return this;
    }

    public final boolean isInitialized() {
      return true;
    }

    @Override
    public void writeTo(com.google.protobuf.micro.CodedOutputStreamMicro output) {
    }

    private int cachedSize = -1;
    @Override
    public int getCachedSize() {
      if (cachedSize < 0) {
        // getSerializedSize sets cachedSize
        getSerializedSize();
      }
      return cachedSize;
    }

    @Override
    public int getSerializedSize() {
      int size = 0;
      cachedSize = size;
      return size;
    }

    @Override
    public UploadSuccessRsp mergeFrom(
        com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!parseUnknownField(input, tag)) {
              return this;
            }
            break;
          }
        }
      }
    }

    public static UploadSuccessRsp parseFrom(byte[] data)
        throws com.google.protobuf.micro.InvalidProtocolBufferMicroException {
      return (UploadSuccessRsp) (new UploadSuccessRsp().mergeFrom(data));
    }

    public static UploadSuccessRsp parseFrom(
            com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      return new UploadSuccessRsp().mergeFrom(input);
    }

  }

}
